name: Development Build (Local Simulation)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-only:
    runs-on: ubuntu-latest

    steps:
      - name: Detect changed microservice
        id: detect
        run: |
          set -euo pipefail
          echo "Detecting changed folder..."

          if [ -n "${GITHUB_BASE_REF:-}" ]; then
            echo "Event is a pull_request. Base ref: $GITHUB_BASE_REF"
            git fetch origin $GITHUB_BASE_REF --depth=1 || true
            CHANGED=$(git diff --name-only origin/$GITHUB_BASE_REF HEAD | grep '/' | cut -d'/' -f1 | sort -u | head -n1 || true)
          else
            echo "Event is a push. Trying HEAD^..."
            if ! git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              echo "No previous commit locally — fetching history..."
              git fetch --prune --unshallow || true
            fi
            CHANGED=$(git diff --name-only HEAD^ HEAD | grep '/' | cut -d'/' -f1 | sort -u | head -n1 || true)
          fi

          echo "Changed folder detected: $CHANGED"

          #  Filtrar carpetas válidas (las de tus microservicios)
          VALID_SERVICES=("frontend" "auth-api" "users-api" "todos-api" "log-message-processor")
          if [[ " ${VALID_SERVICES[@]} " =~ " ${CHANGED} " ]]; then
            echo "Valid microservice detected: $CHANGED"
            echo "service=$CHANGED" >> $GITHUB_OUTPUT
          else
            echo "No valid microservice changed — skipping build."
            echo "service=" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        if: steps.detect.outputs.service != ''
        run: |
          SERVICE=${{ steps.detect.outputs.service }}
          IMAGE_NAME="${SERVICE}:latest"
          echo "Building Docker image for $SERVICE..."
          docker build -t $IMAGE_NAME ./$SERVICE
          echo " Build completed successfully for $SERVICE"


      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Restart ACI container group
        run: |
          echo "Restarting the entire ACI group..."
          az container restart \
            --resource-group microservicesRgJenniferCastro \
            --name microservices-group || true
