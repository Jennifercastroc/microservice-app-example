name: Development Build (Local Simulation)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-only:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # traer todo el historial para poder usar HEAD^ y comparaciones

      - name: Detect changed microservice
        id: detect
        run: |
          set -euo pipefail
          echo "Detecting changed folder..."

          # Safety: ensure .git exists
          if [ ! -d .git ]; then
            echo "ERROR: .git not found in workspace. Ensure 'actions/checkout' ran correctly."
            echo "service=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Distinguish event types: pull_request or push
          if [ "${GITHUB_EVENT_NAME:-}" = "pull_request" ]; then
            echo "Event is a pull_request. Fetching base branch..."
            BASE_REF="${{ github.event.pull_request.base.ref }}"
            git fetch origin "$BASE_REF" --depth=1 || true
            CHANGED=$(git diff --name-only origin/"$BASE_REF"...HEAD | grep '/' | cut -d'/' -f1 | sort -u | head -n1 || true)
          else
            echo "Event is a push. Trying HEAD^..."
            if ! git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              echo "Previous commit not present locally — fetching history..."
              git fetch --prune --unshallow || true
            fi
            CHANGED=$(git diff --name-only HEAD^ HEAD | grep '/' | cut -d'/' -f1 | sort -u | head -n1 || true)
          fi

          echo "----- git log (last 5) -----"
          git --no-pager log --oneline -5 || true
          echo "----- changed folder result -----"
          echo "$CHANGED"

          # Filter only valid service folders
          VALID_SERVICES=("frontend" "auth-api" "users-api" "todos-api" "log-message-processor")
          if [[ -n "$CHANGED" && " ${VALID_SERVICES[*]} " == *" $CHANGED "* ]]; then
            echo "Valid microservice detected: $CHANGED"
            echo "service=$CHANGED" >> $GITHUB_OUTPUT
          else
            echo "No valid microservice changed — skipping build."
            echo "service=" >> $GITHUB_OUTPUT
          fi


      - name: Install Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}



      - name: Build and push Docker image
        if: steps.detect.outputs.service != ''
        run: |
          SERVICE=${{ steps.detect.outputs.service }}
          IMAGE_NAME="${{ secrets.REGISTRY_LOGIN_SERVER }}/${SERVICE}:latest"

          echo "Building image for $SERVICE..."
          docker build -t $IMAGE_NAME ./$SERVICE

          echo "Logging into ACR..."

          echo "Pushing image to ACR..."
          docker push $IMAGE_NAME

          az acr login --name ${{ secrets.REGISTRY_LOGIN_SERVER }}


      - name: Restart only the updated container
        if: steps.detect.outputs.service != ''
        run: |
          SERVICE=${{ steps.detect.outputs.service }}
          echo "Recreating container for $SERVICE..."

          az container delete \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $SERVICE --yes || true

          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name $SERVICE \
            --image "${{ secrets.REGISTRY_LOGIN_SERVER }}/${SERVICE}:latest" \
            --cpu 1 --memory 1 \
            --registry-login-server ${{ secrets.REGISTRY_LOGIN_SERVER }} \
            --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
            --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
            --restart-policy Always \
            --location eastus


      - name: Restart ACI container group
        run: |
          echo "Restarting the entire ACI group..."
          az container restart \
            --resource-group microservicesRgJenniferCastro \
            --name microservices-group || true
